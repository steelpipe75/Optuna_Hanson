# -*- coding: utf-8 -*-
"""Optunaを使った最適化_体験.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/131tS-sAfEKUF22FjoD_ZP8rCbA0tw8Bx

株式会社Preferred Networks (Optunaの開発企業) の 太田 健 さん  
2019年9月27日のPyData.Tokyo Meetup #21での発表資料のスライド  
https://www.slideshare.net/slideshow/pydatatokyo-meetup-21-optuna/176696156  
に記載されていたソースコードをベースにを一部改変して、Optunaを使った最適化を体験してみた
"""

!pip install optuna

import optuna

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt

# 最適化対象の関数を定義
def target_function(x):
  return np.sin(x) * np.sin(8*x)

# target_function(x)のx = 0 から x = np.pi の範囲のグラフ
x = np.linspace(0, np.pi, 100)
y = target_function(x)
plt.plot(x, y)
plt.xlabel('x')
plt.ylabel('target_function(x)')
plt.show()

# 目的関数を定義
def objective(trial):
  x = trial.suggest_uniform('x', 0, np.pi) # 探索範囲
  return target_function(x) # 評価スコアとして最適化対象の関数値を返す

study = optuna.create_study(direction="minimize") # 最小化の最適化問題
study.optimize(objective, n_trials=100) # 最適化実行 試行回数=100回

# 最小になったときのパラメータ
study.best_params

# 最小になったときの結果
study.best_value

# 最適化の履歴
optuna.visualization.plot_optimization_history(study)

# Trialごとのパラメータと結果をプロット
optuna.visualization.plot_slice(study)

# TrialデータをDataFrameとして取り出す
trial_df = study.trials_dataframe()

# Trial10回毎にどこを試していたかをplot (青→赤)
filt_dfs = [trial_df.iloc[i:i+10] for i in range(0, len(trial_df), 10)]
for filt_df in filt_dfs:
  plt.scatter(filt_df['params_x'], filt_df['value'], c=filt_df['number'], cmap='coolwarm')
  plt.plot(x, y, color='gray', alpha=0.5)
  plt.xlabel('x')
  plt.ylabel('target_function(x)')
  plt.show()

"""だんだん最適値付近を集中的に探索する様子が見える"""